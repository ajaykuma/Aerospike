##AMC- Aerospike Management Console
--shows info about your cluster
--Resource usage such as RAM, Disk, Throughput, Nodes, Namespaces etc
--Statistics, Defintions & Jobs

#Install Aerospike management server -Default Dashboard

>root@instance-template-1:~#cd
>root@instance-template-1:~# sudo wget https://github.com/aerospike-community/amc/releases/download/5.0.0/aerospike-amc-enterprise-5.0.0_amd64.deb
>root@instance-template-1:~# sudo dpkg -i aerospike-amc-enterprise-5.0.0_amd64.deb
>root@instance-template-1:~# sudo ufw allow 8081/tcp
>root@instance-template-1:~# sudo /etc/init.d/amc start
[ ok ] Starting amc (via systemctl): amc.service.

OR
>root@instance-template-1:~# sudo service amc start

>root@instance-template-1:~# /etc/init.d/amc status
● amc.service - LSB: Manage the amc app server
   Loaded: loaded (/etc/init.d/amc; generated)
   Active: active (running) since Sun 2022-05-29 14:20:54 UTC; 5s ago
     Docs: man:systemd-sysv-generator(8)
  Process: 3345 ExecStart=/etc/init.d/amc start (code=exited, status=0/SUCCESS)
 Main PID: 3368 (amc)
    Tasks: 5 (limit: 4915)
   CGroup: /system.slice/amc.service
           └─3368 /opt/amc/amc -config-file=/etc/amc/amc.conf -config-dir=/etc/amc

May 29 14:20:54 instance-template-1 systemd[1]: Starting LSB: Manage the amc app server...
May 29 14:20:54 instance-template-1 amc[3345]: Starting amc: 0
May 29 14:20:54 instance-template-1 systemd[1]: Started LSB: Manage the amc app server.


#Access the console:

<Ipaddress of node where amc was started/Public-IP>:8081
--when it asks for IP of node to connect we can give '127.0.0.1' & port as default would be 3000
http://<Ipaddress of node where amc was started/Public-IP>:8081/#dashboard/127.0.0.1:3000/60/<private-ip>:3000

-------------
#Setting AMC using docker image
sudo apt install docker.io
sudo docker pull aerospike/amc
sudo docker run -d --name amc -p 8081:8081 aerospike/amc
sudo docker stats
sudo docker ps --all

Access AMC using http://localhost:8081

IP: ipaddress
Port:3000

--stop container
sudo docker stop container 673d7ebd5469
sudo docker rm amc

--------------
#Installing go for testing...(OPTIONAL)
>wget https://go.dev/dl/go1.15.15.linux-amd64.tar.gz
>root@instance-template-1:~# tar -xf go1.15.15.linux-amd64.tar.gz
>root@instance-template-1:~# ls
aerospike-amc-enterprise-5.0.0_amd64.deb  aerospike-server-community-5.7.0.17-ubuntu18.04  
aerospike.tgz  go  go1.15.15.linux-amd64.tar.gz

>root@instance-template-1:~# mv go /usr/local/go
>root@instance-template-1:~# chown root:root /usr/local/go
>root@instance-template-1:~# chmod 755 /usr/local/go

>root@instance-template-1:~# mkdir /usr/local/go/workspace_test
>root@instance-template-1:~# mkdir /usr/local/go/workspace_test/bin
>root@instance-template-1:~# mkdir /usr/local/go/workspace_test/pkg
>root@instance-template-1:~# mkdir /usr/local/go/workspace_test/src

#Setting environment variables:
>root@instance-template-1:~#vi .bashrc
export GOPATH=/usr/local/go/workspace_test
export GOROOT=/usr/local/go
export GPATH=/usr/local/go
export PATH=$PATH:$GPATH/bin

>source .bashrc

>root@instance-template-1:~# go version
go version go1.15.15 linux/amd64

>root@instance-template-1:~# echo $GOPATH
/usr/local/go/workspace_test

>root@instance-template-1:~# echo $GOROOT
/usr/local/go

>root@instance-template-1:~# go get github.com/aerospike/aerospike-client-go
>root@instance-template-1:~# ls /usr/local/go/workspace_test/pkg
 linux_amd64
>root@instance-template-1:~# ls /usr/local/go/workspace_test/src
 github.com  golang.org

>root@instance-template-1:~# cd /usr/local/go/workspace_test/src/github.com/aerospike/aerospike-client-go/tools/benchmark/
>root@instance-template-1:/usr/local/go/workspace_test/src/github.com/aerospike/aerospike-client-go/tools/benchmark# go run benchmark.go -h 10.128.0.3
2022/05/29 17:57:37 Setting number of CPUs to use: 2
2022/05/29 17:57:37 benchmark.go:202: hosts:            10.128.0.3
2022/05/29 17:57:37 benchmark.go:203: port:             3000
2022/05/29 17:57:37 benchmark.go:204: namespace:        test
2022/05/29 17:57:37 benchmark.go:205: set:              testset
2022/05/29 17:57:37 benchmark.go:206: keys/records:     1000000
2022/05/29 17:57:37 benchmark.go:207: object spec:      I, size: 0
2022/05/29 17:57:37 benchmark.go:208: random bin values:        false
2022/05/29 17:57:37 benchmark.go:209: workload:         Initialize 100% of records
2022/05/29 17:57:37 benchmark.go:210: concurrency:      32
2022/05/29 17:57:37 benchmark.go:211: max throughput:   unlimited
2022/05/29 17:57:37 benchmark.go:212: timeout:          0 ms
2022/05/29 17:57:37 benchmark.go:213: max retries:      2
2022/05/29 17:57:37 benchmark.go:214: debug:            false
2022/05/29 17:57:37 benchmark.go:215: latency:          0:0
2022/05/29 17:57:37 benchmark.go:216: conn. pool size:  128
2022/05/29 17:57:37 benchmark.go:217: conn. threshold:  64
2022/05/29 17:57:37 benchmark.go:156: Warm-up conns.    :127
2022/05/29 17:57:37 benchmark.go:158: Nodes Found: [BB90300800A0142]
2022/05/29 17:57:38 benchmark.go:735: write(tps=37849 timeouts=0 errors=0 totalCount=37849)
2022/05/29 17:57:39 benchmark.go:735: write(tps=43443 timeouts=0 errors=0 totalCount=81292)

Note**
root@instance-template-1:~# go help get
usage: go get [-d] [-f] [-t] [-u] [-v] [-fix] [-insecure] [build flags] [packages]

Get downloads the packages named by the import paths, along with their
dependencies. It then installs the named packages, like 'go install'.

The -d flag instructs get to stop after downloading the packages; that is,
it instructs get not to install the packages.

The -f flag, valid only when -u is set, forces get -u not to verify that
each package has been checked out from the source control repository
implied by its import path. This can be useful if the source is a local fork
of the original.

The -fix flag instructs get to run the fix tool on the downloaded packages
before resolving dependencies or building the code.

The -insecure flag permits fetching from repositories and resolving
custom domains using insecure schemes such as HTTP. Use with caution.

The -t flag instructs get to also download the packages required to build
the tests for the specified packages.

The -u flag instructs get to use the network to update the named packages
and their dependencies. By default, get uses the network to check out
missing packages but does not use it to look for updates to existing packages.

The -v flag enables verbose progress and debug output.

Get also accepts build flags to control the installation. See 'go help build'.

When checking out a new package, get creates the target directory
GOPATH/src/<import-path>. If the GOPATH contains multiple entries,
get uses the first one. For more details see: 'go help gopath'.

When checking out or updating a package, get looks for a branch or tag
that matches the locally installed version of Go. The most important
rule is that if the local installation is running version "go1", get
searches for a branch or tag named "go1". If no such version exists
it retrieves the default branch of the package.

When go get checks out or updates a Git repository,
it also updates any git submodules referenced by the repository.

Get never checks out or updates code stored in vendor directories.

See also: go build, go install, go clean.

===========================






